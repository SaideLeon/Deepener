// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  papers        Paper[]
  activityLogs  ActivityLog[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  GeneratedWork GeneratedWork[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Paper {
  id            String          @id @default(cuid())
  title         String
  content       String          @db.Text
  status        WorkStatus      @default(draft)
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  GeneratedWork GeneratedWork[]
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  details   String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model GeneratedWork {
  id            String     @id @default(uuid())
  userId        String
  paperId       String?
  title         String?
  topic         String?
  instructions  String     @db.Text
  generatedText String     @db.Text
  language      String
  citationStyle String
  sourceType    String?
  sourceContent String?    @db.Text
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  status        WorkStatus @default(draft)
  metadata      Json?

  user  User   @relation(fields: [userId], references: [id])
  paper Paper? @relation(fields: [paperId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

enum WorkStatus {
  draft
  completed
}
